Model SysADLArchitecture;

package SysADL.types {
	value type Int {
	}
	value type Boolean {
	}
	value type String {
	}
	value type Void {
	}
	value type Real {
	}
	dimension Temperature
	unit Celsius {
		dimension = Temperature 
	} 
	unit Fahrenheit {
		dimension = Temperature 
	} 
	value type Temp {
		dimension = Temperature
	}
	value type CelsiusTemp extends Temp {
		unit = Celsius dimension = Temperature
	}
	value type FahrenheitTemp extends Temp {
		unit = Fahrenheit dimension = Temperature
	}
	enum Command {
		On,
		Off
	}
	datatype Commands {
		attributes 
			cooler : Command 
			heater : Command
	}
}

package RTCSystemConnectors {
	import RTCSystemPorts;
	
	connector def FahrenheitToCelsiusCN {
		participants 
			~ source : RTCSystemPorts.FTemperatureOPT {
		}
			~ destination : RTCSystemPorts.CTemperatureIPT {
		}
		flows SysADL.types.FahrenheitTemp from source to destination
	}
	connector def CTemperatureCN {
		participants 
			~ source : RTCSystemPorts.CTemperatureOPT {
		}
			~ destination : RTCSystemPorts.CTemperatureIPT {
		}
		flows SysADL.types.CelsiusTemp from source to destination
	}
	connector def DetectPresenceCN {
		participants 
			~ source : RTCSystemPorts.PresenceOPT {
		}
			~ destination : RTCSystemPorts.PresenceIPT {
		}
		flows SysADL.types.Boolean from source to destination
	}
	connector def SendCommandCN {
		participants 
			~ source : RTCSystemPorts.CommandOPT {
		}
			~ destination : RTCSystemPorts.CommandIPT {
		}
		flows SysADL.types.Command from source to destination
	}
}

package RTCSystemComponents {
	import RTCSystemPorts;
	import SysADL.types;
	import RTCSystemConnectors;

	component def RTCSystem {
	configuration {
		components:
			S1 : TemperatureSensorCP {
				using ports current : RTCSystemPorts.FTemperatureOPT {
				}
			}
			S2 : TemperatureSensorCP {
				using ports current : RTCSystemPorts.FTemperatureOPT {
				}
			}
			PresenceSensorCP : PresenceSensorCP {
				using ports detected : RTCSystemPorts.PresenceOPT {
				}
			}
			UserInterfaceCP : UserInterfaceCP {
				using ports desired : RTCSystemPorts.CTemperatureOPT {
				}
			}
			HeaterCP : HeaterCP {
				using ports controller : RTCSystemPorts.CommandIPT {
				}
			}
			CoolerCP : CoolerCP {
				using ports controller : RTCSystemPorts.CommandIPT {
				}
			}
			RoomTemperatureControllerCP : RoomTemperatureControllerCP {
				using ports 
					userTemp : RTCSystemPorts.CTemperatureIPT {
					}
					detected : RTCSystemPorts.PresenceIPT {
					}
					cooling : RTCSystemPorts.CommandOPT {
					}
					heating : RTCSystemPorts.CommandOPT {
					}
					localTemp1 : RTCSystemPorts.CTemperatureIPT {
					}
					localTemp2 : RTCSystemPorts.CTemperatureIPT {
					}
				}
		connectors:
			c1 : RTCSystemConnectors.FahrenheitToCelsiusCN 
				bindings S1.current = RoomTemperatureControllerCP.localTemp1 
			c2 : RTCSystemConnectors.FahrenheitToCelsiusCN 
				bindings S2.current = RoomTemperatureControllerCP.localTemp2 
			uc : RTCSystemConnectors.CTemperatureCN
				bindings UserInterfaceCP.desired = RoomTemperatureControllerCP.userTemp 
			pc : RTCSystemConnectors.DetectPresenceCN 
				bindings PresenceSensorCP.detected = RoomTemperatureControllerCP.detected
			cc1 : RTCSystemConnectors.SendCommandCN 
				bindings RoomTemperatureControllerCP.heating = HeaterCP.controller 
			cc2 : RTCSystemConnectors.SendCommandCN 
				bindings RoomTemperatureControllerCP.cooling = CoolerCP.controller
		}
	}
	component def PresenceSensorCP {
		ports detected : RTCSystemPorts.PresenceOPT {
		}
	}
	component def HeaterCP {
		ports controller : RTCSystemPorts.CommandIPT {
		}
	}
	component def CoolerCP {
		ports controller : RTCSystemPorts.CommandIPT {
		}
	}
	component def UserInterfaceCP {
		ports desired : RTCSystemPorts.CTemperatureOPT {
		}
	}
	component def TemperatureSensorCP {
		ports current : RTCSystemPorts.FTemperatureOPT {
		}
	}
	component def RoomTemperatureControllerCP {
		ports 
			userTemp : RTCSystemPorts.CTemperatureIPT {
		}
			detected : RTCSystemPorts.PresenceIPT {
		}
			cooling : RTCSystemPorts.CommandOPT {
		}
			heating : RTCSystemPorts.CommandOPT {
		}
			localTemp1 : RTCSystemPorts.CTemperatureIPT {
		}
			localTemp2 : RTCSystemPorts.CTemperatureIPT {
		}
		
	}
	activity def CalculateAverageTemperatureAC ( t1 : SysADL.types.Temp, t2 : SysADL.types.Temp ) : ( averageTemp : SysADL.types.Temp ) {
		body {
			actions : cavg : CalculeAverageTemperatureAN {
				using pins t2 : SysADL.types.Temp t1 : SysADL.types.Temp
			}
			delegate t2 to cavg.t2 delegate t1 to cavg.t1 delegate averageTemp to cavg
		}
	}
	action def CalculeAverageTemperatureAN ( t1 : SysADL.types.Temp, t2 : SysADL.types.Temp ) : SysADL.types.Temp {
	}
}

package RTCSystemPorts {
	import SysADL.types;

	port def FTemperatureOPT {
		flow out SysADL.types.FahrenheitTemp
	}
	port def FTemperatureIPT {
		flow in SysADL.types.FahrenheitTemp
	}
	port def CTemperatureOPT {
		flow out SysADL.types.CelsiusTemp
	}
	port def CTemperatureIPT {
		flow in SysADL.types.CelsiusTemp
	}
	port def CommandOPT {
		flow out SysADL.types.Command
	}
	port def CommandIPT {
		flow in SysADL.types.Command
	}
	port def PresenceOPT {
		flow out SysADL.types.Boolean
	}
	port def PresenceIPT {
		flow in SysADL.types.Boolean
	}
}